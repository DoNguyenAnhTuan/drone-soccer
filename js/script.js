window.onload = function() {
    loadFromLocalStorage(); // T·∫£i d·ªØ li·ªáu khi F5
    showNextRoundTeams();   //  Hi·ªÉn th·ªã danh s√°ch 16 ƒë·ªôi
};

let teams = [
    "ƒê·ªôi Tu·∫•n", "ƒê·ªôi 2", "ƒê·ªôi 3", "ƒê·ªôi 4", 
    "ƒê·ªôi H·∫±ng", "ƒê·ªôi 6", "ƒê·ªôi 7", "ƒê·ªôi 8", 
    "ƒê·ªôi V≈©", "ƒê·ªôi 10", "ƒê·ªôi 11", "ƒê·ªôi 12", 
    "ƒê·ªôi D", "ƒê·ªôi 14", "ƒê·ªôi 15", "ƒê·ªôi 16",
    "ƒê·ªôi 17", "ƒê·ªôi 18", "ƒê·ªôi 19", "ƒê·ªôi 20",
    "ƒê·ªôi 21", "ƒê·ªôi 22", "ƒê·ªôi 23", "ƒê·ªôi 24"
];

let matches = [];

function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        let j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
}

function randomizeMatches() {
    let savedMatches = localStorage.getItem("matches0");

    if (savedMatches) {
        matches = JSON.parse(savedMatches);
        renderMatches();
        return; // Kh√¥ng x√°o tr·ªôn n·∫øu c√≥ d·ªØ li·ªáu c≈©
    }
            
    shuffle(teams);
    matches = [];
    let matchesContainer = document.getElementById("matches-container");
    matchesContainer.innerHTML = "";

    for (let i = 0; i < teams.length; i += 2) {
        let match = {
            team1: teams[i],
            team2: teams[i + 1],
            score1: [0, 0, 0], // 3 tr·∫≠n
            score2: [0, 0, 0],
            foul1: [0, 0, 0], // S·ªë l·ªói ph·∫°m c·ªßa ƒë·ªôi 1
            foul2: [0, 0, 0], // S·ªë l·ªói ph·∫°m c·ªßa ƒë·ªôi 2
            totalPoints1: 0,
            totalPoints2: 0,
            totalScore1: 0,
            totalScore2: 0,
            totalFoul1: 0,
            totalFoul2: 0
        };
        matches.push(match);
    }

    renderMatches();
}

function updateScore(matchIndex, gameIndex, team, value) {
    let match = matches[matchIndex];
    value = parseInt(value) || 0;

    if (team === 1) {
        match.score1[gameIndex] = value;
    } else {
        match.score2[gameIndex] = value;
    }
    
    calculateResults(matchIndex);
}

function updateFoul(matchIndex, gameIndex, team, value) {
    let match = matches[matchIndex];
    value = parseInt(value) || 0;

    if (team === 1) {
        match.foul1[gameIndex] = value;
    } else {
        match.foul2[gameIndex] = value;
    }
    
    calculateResults(matchIndex);
}

function calculateResults(matchIndex) {
    let match = matches[matchIndex];
    match.totalPoints1 = 0;
    match.totalPoints2 = 0;
    match.totalScore1 = 0;
    match.totalScore2 = 0;
    match.totalFoul1 = 0;
    match.totalFoul2 = 0;

    for (let i = 0; i < 2; i++) {
        match.totalScore1 += match.score1[i];
        match.totalScore2 += match.score2[i];
        match.totalFoul1 += match.foul1[i];
        match.totalFoul2 += match.foul2[i];

        if (match.score1[i] > match.score2[i]) match.totalPoints1 += 3;
        if (match.score1[i] < match.score2[i]) match.totalPoints2 += 3;
        if (match.score1[i] === match.score2[i]) {
            match.totalPoints1 += 1;
            match.totalPoints2 += 1;
        }
    }
    saveToLocalStorage(); // L∆∞u d·ªØ li·ªáu khi c·∫≠p nh·∫≠t ƒëi·ªÉm
    updateNextRoundTeams(); // <--- C·∫≠p nh·∫≠t 16 ƒë·ªôi ngay khi x√°o tr·ªôn
    renderMatches();
}

function renderMatches() {
    let matchesContainer = document.getElementById("matches-container");
    matchesContainer.innerHTML = "";

    matches.forEach((match, index) => {
        let scoreInputs = "";
        let foulInputs = "";
        for (let i = 0; i < 2; i++) {
            scoreInputs += `
                <input type="number" class="score-input" value="${match.score1[i]}" 
                    oninput="updateScore(${index}, ${i}, 1, this.value)">
                -
                <input type="number" class="score-input" value="${match.score2[i]}" 
                    oninput="updateScore(${index}, ${i}, 2, this.value)">
                <br>
            `;

            foulInputs += `
                <input type="number" class="score-input" value="${match.foul1[i]}" 
                    oninput="updateFoul(${index}, ${i}, 1, this.value)">
                -
                <input type="number" class="score-input" value="${match.foul2[i]}" 
                    oninput="updateFoul(${index}, ${i}, 2, this.value)">
                <br>
            `;
        }

        let winnerText = `<br><b>X√©t t·ªïng ƒëi·ªÉm: ${match.totalPoints1} - ${match.totalPoints2}</b>`;
        if (match.totalPoints1 > match.totalPoints2) {
            winnerText += `<br><b>${match.team1} V√†o V√≤ng 1-8! üèÜ</b>`;
        } else if (match.totalPoints1 < match.totalPoints2) {
            winnerText += `<br><b>${match.team2} V√†o V√≤ng 1-8! üèÜ</b>`;
        } else {
            // winnerText += `<br><b>X√©t s·ªë l·ªói: ${match.totalFoul1} - ${match.totalFoul2}</b>`;
            // winnerText += match.totalFoul1 > match.totalFoul2 ? `<br><b>${match.team2} V√†o V√≤ng T·ª© k·∫øt! üèÜ</b>` : `<br><b>${match.team1} V√†o V√≤ng T·ª© k·∫øt! üèÜ</b>`;
            if (match.totalFoul1 < match.totalFoul2) {
                winnerText += `<br><b>${match.team1} V√†o V√≤ng 1-8! üèÜ</b>`;
            } else if (match.totalFoul1 > match.totalFoul2) {
                winnerText += `<br><b>${match.team2} V√†o V√≤ng 1-8! üèÜ</b>`;
            } else {
                winnerText += `<br><b>K·∫øt qu·∫£ h√≤a sau 2 tr·∫≠n! üö®</b><br><b>C·∫ßn x√©t ti√™u ch√≠ ph·ª• ho·∫∑c ƒë·∫•u l·∫°i.</b>`;
            }
        }

        matchesContainer.innerHTML += `<div class="match-box"><div class="match-title">Tr·∫≠n ${index + 1}</div>${match.team1} üÜö ${match.team2}<br><br>ƒêi·ªÉm s·ªë:<br>${scoreInputs}<br>Ph·∫°m l·ªói:<br>${foulInputs}${winnerText}</div>`;
    });
    // Hi·ªÉn th·ªã 4 ƒë·ªôi v√© v·ªõt t·ªët nh·∫•t
    showBestLosers();
}

function checkAndShowNextButton() {
    let allMatchesCompleted = matches.every(match => match.totalPoints1 !== 0 || match.totalPoints2 !== 0);
    document.getElementById("nextRoundButton").classList.toggle("hidden", !allMatchesCompleted);
}

function goToNextRound() {
    window.location.href = "1_16.html"; 
}

function showBestLosers() {
    let losers = [];

    matches.forEach(match => {
        let team1 = {
            name: match.team1,
            points: match.totalPoints1,
            goals: match.totalScore1,
            fouls: match.totalFoul1
        };
        let team2 = {
            name: match.team2,
            points: match.totalPoints2,
            goals: match.totalScore2,
            fouls: match.totalFoul2
        };

        if (match.totalPoints1 < match.totalPoints2) {
            losers.push(team1);
        } else if (match.totalPoints2 < match.totalPoints1) {
            losers.push(team2);
        } else {
            if (match.totalFoul1 > match.totalFoul2) {
                losers.push(team1);
            } else {
                losers.push(team2);
            }
        }
    });

    // S·∫Øp x·∫øp theo: ƒêi·ªÉm ‚Üì, B√†n th·∫Øng ‚Üì, L·ªói ‚Üë
    losers.sort((a, b) => {
        if (b.points !== a.points) return b.points - a.points;
        if (b.goals !== a.goals) return b.goals - a.goals;
        return a.fouls - b.fouls;
    });

    // L·∫•y 4 ƒë·ªôi thua t·ªët nh·∫•t
    let bestLosers = losers.slice(0, 4);

    // Hi·ªÉn th·ªã danh s√°ch ƒë·ªôi v√© v·ªõt d∆∞·ªõi d·∫°ng b·∫£ng
    let losersHTML = `
        <div class="table-container">
            <h2>üéñÔ∏è 4 ƒê·ªôi H·∫°ng 3 T·ªët Nh·∫•t üéñÔ∏è</h2>
            <table>
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>T√™n ƒê·ªôi</th>
                        <th>ƒêi·ªÉm</th>
                        <th>B√†n Th·∫Øng</th>
                        <th>L·ªói</th>
                    </tr>
                </thead>
                <tbody>`;

    bestLosers.forEach((team, index) => {
        losersHTML += `
            <tr>
                <td>${index + 1}</td>
                <td><b>${team.name}</b></td>
                <td>${team.points}</td>
                <td>${team.goals}</td>
                <td>${team.fouls}</td>
            </tr>`;
    });

    losersHTML += `
                </tbody>
            </table>
        </div>`;

    document.getElementById("best-losers").innerHTML = losersHTML;
    }

function resetScores() {
    matches.forEach(match => {
        match.score1 = [0, 0, 0];
        match.score2 = [0, 0, 0];
        match.foul1 = [0, 0, 0];
        match.foul2 = [0, 0, 0];
        match.totalPoints1 = 0;
        match.totalPoints2 = 0;
        match.totalScore1 = 0;
        match.totalScore2 = 0;
        match.totalFoul1 = 0;
        match.totalFoul2 = 0;
    });

    saveToLocalStorage(); // L∆∞u d·ªØ li·ªáu sau reset
    updateNextRoundTeams(); // <--- C·∫≠p nh·∫≠t 16 ƒë·ªôi ngay khi x√°o tr·ªôn
    renderMatches();
}

function saveToLocalStorage() {
    localStorage.setItem("matches0", JSON.stringify(matches));
}

function loadFromLocalStorage() {
    let savedMatches = localStorage.getItem("matches0");
    if (savedMatches) {
        matches = JSON.parse(savedMatches);
        renderMatches();
    }
}
function showNextRoundTeams() {
    let nextRoundData = localStorage.getItem("123");
    if (!nextRoundData) {
        document.getElementById("next-round-teams").innerHTML = "<h2>Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu 16 ƒë·ªôi.</h2>";
        return;
    }

    let nextRoundTeams = JSON.parse(nextRoundData);

    // Ki·ªÉm tra xem d·ªØ li·ªáu c√≥ ƒë·ªß 16 ƒë·ªôi hay kh√¥ng
    if (nextRoundTeams.length !== 16) {
        document.getElementById("next-round-teams").innerHTML = "<h2>D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá! Kh√¥ng ƒë·ªß 16 ƒë·ªôi.</h2>";
        return;
    }

    // Hi·ªÉn th·ªã danh s√°ch 16 ƒë·ªôi v√†o v√≤ng sau d∆∞·ªõi d·∫°ng b·∫£ng
    let teamsHTML = `
        <div class="table-container">
            <h2>‚úÖ Danh S√°ch 16 ƒê·ªôi V√†o V√≤ng Ti·∫øp Theo ‚úÖ</h2>
            <table>
                <thead>
                    <tr>
                        <th>STT</th>
                        <th>T√™n ƒê·ªôi</th>
                        <th>ƒêi·ªÉm</th>
                        <th>B√†n Th·∫Øng</th>
                        <th>L·ªói</th>
                    </tr>
                </thead>
                <tbody>`;

    nextRoundTeams.forEach((team, index) => {
        teamsHTML += `
            <tr>
                <td>${index + 1}</td>
                <td><b>${team.name}</b></td>
                <td>${team.points}</td>
                <td>${team.goals}</td>
                <td>${team.fouls}</td>
            </tr>`;
    });

    teamsHTML += `
                </tbody>
            </table>
        </div>`;

    document.getElementById("next-round-teams").innerHTML = teamsHTML;
}

function resetAndShuffleMatches() {
        // X√≥a d·ªØ li·ªáu c≈© v√† x√°o tr·ªôn l·∫°i c√°c ƒë·ªôi
        localStorage.removeItem("matches0");
        shuffle(teams);
        matches = [];

        for (let i = 0; i < teams.length; i += 2) {
            let match = {
                team1: teams[i],
                team2: teams[i + 1],
                score1: [0, 0, 0],
                score2: [0, 0, 0],
                foul1: [0, 0, 0],
                foul2: [0, 0, 0],
                totalPoints1: 0,
                totalPoints2: 0,
                totalScore1: 0,
                totalScore2: 0,
                totalFoul1: 0,
                totalFoul2: 0
            };
            matches.push(match);
        }

        saveToLocalStorage(); // L∆∞u l·∫°i d·ªØ li·ªáu m·ªõi sau khi x√°o tr·ªôn
        updateNextRoundTeams(); // <--- C·∫≠p nh·∫≠t 16 ƒë·ªôi ngay khi x√°o tr·ªôn
        renderMatches(); // Hi·ªÉn th·ªã tr·∫≠n ƒë·∫•u m·ªõi
        // alert("ƒê√£ x√°o tr·ªôn l·∫°i danh s√°ch ƒë·ªôi!");
    }

function updateNextRoundTeams() {
    let winners = [];
    let losers = [];

    matches.forEach(match => {
        let team1 = {
            name: match.team1,
            points: match.totalPoints1,
            goals: match.totalScore1,
            fouls: match.totalFoul1
        };
        let team2 = {
            name: match.team2,
            points: match.totalPoints2,
            goals: match.totalScore2,
            fouls: match.totalFoul2
        };

        if (match.totalPoints1 > match.totalPoints2) {
            winners.push(team1);
            losers.push(team2);
        } else if (match.totalPoints2 > match.totalPoints1) {
            winners.push(team2);
            losers.push(team1);
        } else {
            // X√©t tr∆∞·ªùng h·ª£p h√≤a -> ∆Øu ti√™n ƒë·ªôi ph·∫°m √≠t l·ªói h∆°n
            if (match.totalFoul1 < match.totalFoul2) {
                winners.push(team1);
                losers.push(team2);
            } else {
                winners.push(team2);
                losers.push(team1);
            }
        }
    });

    // S·∫Øp x·∫øp losers theo: ƒêi·ªÉm ‚Üì, B√†n th·∫Øng ‚Üì, L·ªói ‚Üë
    losers.sort((a, b) => {
        if (b.points !== a.points) return b.points - a.points;
        if (b.goals !== a.goals) return b.goals - a.goals;
        return a.fouls - b.fouls;
    });

    // L·∫•y 4 ƒë·ªôi h·∫°ng 3 t·ªët nh·∫•t
    const bestLosers = losers.slice(0, 4);

    // K·∫øt h·ª£p 12 ƒë·ªôi th·∫Øng v√† 4 ƒë·ªôi v√© v·ªõt th√†nh 16 ƒë·ªôi
    const nextRoundTeams = winners.concat(bestLosers);

    // ‚úÖ L∆∞u danh s√°ch 16 ƒë·ªôi v√†o localStorage
    localStorage.setItem("123", JSON.stringify(nextRoundTeams));

    // ‚úÖ Hi·ªÉn th·ªã danh s√°ch 16 ƒë·ªôi m·ªõi
    showNextRoundTeams();
}

randomizeMatches();